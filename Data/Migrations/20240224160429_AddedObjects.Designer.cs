// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240224160429_AddedObjects")]
    partial class AddedObjects
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.27");

            modelBuilder.Entity("Data.Models.AddressEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Country")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            id = 1,
                            AuthorId = 7,
                            City = "Anytown",
                            Country = 1,
                            HouseNumber = "Apt 101",
                            PostalCode = "12345",
                            Street = "123 Main Street"
                        },
                        new
                        {
                            id = 2,
                            AuthorId = 6,
                            City = "Othertown",
                            Country = 2,
                            HouseNumber = "Unit 202",
                            PostalCode = "67890",
                            Street = "456 Elm Street"
                        },
                        new
                        {
                            id = 3,
                            AuthorId = 5,
                            City = "Somewhere",
                            Country = 3,
                            HouseNumber = "Suite 303",
                            PostalCode = "ABCDE",
                            Street = "789 Oak Avenue"
                        },
                        new
                        {
                            id = 4,
                            AuthorId = 4,
                            City = "Anothercity",
                            Country = 4,
                            HouseNumber = "Unit 404",
                            PostalCode = "WXYZ",
                            Street = "321 Pine Lane"
                        },
                        new
                        {
                            id = 5,
                            AuthorId = 3,
                            City = "Yetanothercity",
                            Country = 5,
                            HouseNumber = "Apt 505",
                            PostalCode = "54321",
                            Street = "555 Cedar Street"
                        },
                        new
                        {
                            id = 6,
                            AuthorId = 2,
                            City = "Anotherplace",
                            Country = 6,
                            HouseNumber = "Suite 606",
                            PostalCode = "FGHIJ",
                            Street = "777 Maple Avenue"
                        },
                        new
                        {
                            id = 7,
                            AuthorId = 1,
                            City = "Someplace",
                            Country = 7,
                            HouseNumber = "Unit 707",
                            PostalCode = "LMNOP",
                            Street = "999 Birch Road"
                        },
                        new
                        {
                            id = 8,
                            AuthorId = 1,
                            City = "Yetanotherplace",
                            Country = 8,
                            HouseNumber = "Apartment 808",
                            PostalCode = "QRSTU",
                            Street = "111 Oak Street"
                        });
                });

            modelBuilder.Entity("Data.Models.AuthorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "John",
                            Surname = "Doe"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Jane",
                            Surname = "Smith"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Michael",
                            Surname = "Johnson"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Emily",
                            Surname = "Brown"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "David",
                            Surname = "Williams"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Sarah",
                            Surname = "Jones"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Daniel",
                            Surname = "Garcia"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Jessica",
                            Surname = "Martinez"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "James",
                            Surname = "Lee"
                        },
                        new
                        {
                            Id = 10,
                            FirstName = "Sophia",
                            Surname = "Lopez"
                        });
                });

            modelBuilder.Entity("Data.Models.PhotoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Camera")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeTaken")
                        .HasColumnType("TEXT")
                        .HasColumnName("taken_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorEmail = "john.doe@example.com",
                            AuthorId = 1,
                            Camera = "Canon EOS 5D Mark IV",
                            DateTimeTaken = new DateTime(2023, 5, 15, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Beautiful landscape",
                            Format = "c.png",
                            Resolution = "6000x4000"
                        },
                        new
                        {
                            Id = 2,
                            AuthorEmail = "jane.smith@example.com",
                            AuthorId = 2,
                            Camera = "Nikon D850",
                            DateTimeTaken = new DateTime(2023, 6, 20, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sunset on the beach",
                            Format = "b.png",
                            Resolution = "8256x5504"
                        },
                        new
                        {
                            Id = 3,
                            AuthorEmail = "michael.johnson@example.com",
                            AuthorId = 3,
                            Camera = "Sony Alpha a7 III",
                            DateTimeTaken = new DateTime(2023, 7, 10, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Description = "Urban cityscape",
                            Format = "a.png",
                            Resolution = "6000x3376"
                        },
                        new
                        {
                            Id = 6,
                            AuthorEmail = "emily.brown@example.com",
                            AuthorId = 4,
                            Camera = "Fujifilm X-T4",
                            DateTimeTaken = new DateTime(2023, 8, 5, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mountain peak",
                            Format = "w.jpg",
                            Resolution = "6240x4160"
                        },
                        new
                        {
                            Id = 7,
                            AuthorEmail = "david.williams@example.com",
                            AuthorId = 5,
                            Camera = "Leica Q2",
                            DateTimeTaken = new DateTime(2023, 9, 12, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Historic landmark",
                            Format = "dsd.jpg",
                            Resolution = "8368x5584"
                        },
                        new
                        {
                            Id = 8,
                            AuthorEmail = "sarah.jones@example.com",
                            AuthorId = 6,
                            Camera = "Panasonic Lumix S5",
                            DateTimeTaken = new DateTime(2023, 10, 25, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Colorful street art",
                            Format = "fa.jpg",
                            Resolution = "6000x4000"
                        },
                        new
                        {
                            Id = 9,
                            AuthorEmail = "daniel.garcia@example.com",
                            AuthorId = 7,
                            Camera = "Olympus OM-D E-M1 Mark III",
                            DateTimeTaken = new DateTime(2023, 11, 8, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Description = "Spectacular waterfall",
                            Format = "bfd.jpg",
                            Resolution = "5184x3888"
                        },
                        new
                        {
                            Id = 10,
                            AuthorEmail = "jessica.martinez@example.com",
                            AuthorId = 8,
                            Camera = "Pentax K-1 Mark II",
                            DateTimeTaken = new DateTime(2023, 12, 20, 9, 15, 0, 0, DateTimeKind.Unspecified),
                            Description = "Winter wonderland",
                            Format = "fas.jpg",
                            Resolution = "7360x4912"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "67ad0d8d-145a-447b-8805-28cdbb97a734",
                            ConcurrencyStamp = "67ad0d8d-145a-447b-8805-28cdbb97a734",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "97234998-9ca5-4421-820f-d538bb4f123b",
                            ConcurrencyStamp = "97234998-9ca5-4421-820f-d538bb4f123b",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bd51b498-042b-4022-945a-ff6feb81174a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b496584-c925-47d6-9a77-a4256d76cba9",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEH99qqnmI1d97ydNKLc4ySEK9L+I56vHURNiVb0yLCHXKuC/gYYSzfiTPnhFJb80Bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c920965-5a94-4c27-8fa4-f9dd22e35cec",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "5cfc33fc-7186-4ae1-aa24-3956c812bc3e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1819e7c-c52d-45ba-bf83-d991fc64ed46",
                            Email = "user@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ4TZTMXIOSCZV6HXTcCbBWu5uOwZd40sWHP/h8wkM+Rc3N9xFSmMg65gfI4OvJIRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05c03e34-03d3-4fd7-b2c7-e64dcece89c5",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bd51b498-042b-4022-945a-ff6feb81174a",
                            RoleId = "67ad0d8d-145a-447b-8805-28cdbb97a734"
                        },
                        new
                        {
                            UserId = "5cfc33fc-7186-4ae1-aa24-3956c812bc3e",
                            RoleId = "97234998-9ca5-4421-820f-d538bb4f123b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Models.AddressEntity", b =>
                {
                    b.HasOne("Data.Models.AuthorEntity", "Author")
                        .WithMany("Address")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Data.Models.PhotoEntity", b =>
                {
                    b.HasOne("Data.Models.AuthorEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.AuthorEntity", b =>
                {
                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
